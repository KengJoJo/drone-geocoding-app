import streamlit as st
from geopy.geocoders import ArcGIS, Nominatim
from rapidfuzz import process as rf_process, fuzz as rf_fuzz
import folium
from PIL import Image
import os
import tempfile
import re
from faster_whisper import WhisperModel

try:
    import pythainlp
    from pythainlp.tokenize import word_tokenize
    PYTHAINLP_AVAILABLE = True
except ImportError:
    PYTHAINLP_AVAILABLE = False
# streamlit_folium р╕нр╕▓р╕Ир╕Ир╕░р╕Хр╣Йр╕нр╕З import р╣Др╕зр╣Йр╕Вр╣Йр╕▓р╕Зр╕Ър╕Щр╕Цр╣Йр╕▓р╕бр╕╡р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Ър╣Ир╕нр╕в
try:
    from streamlit_folium import st_folium
except ImportError:
    st_folium = None

# Audio recorder - import р╣Бр╕вр╕Бр╣Ар╕Юр╕╖р╣Ир╕н cloud compatibility
try:
    from audio_recorder_streamlit import audio_recorder
    AUDIO_RECORDER_AVAILABLE = True
except ImportError:
    AUDIO_RECORDER_AVAILABLE = False

# --- Audio Transcription with Faster-Whisper (Optimized for Thai) ---
@st.cache_resource
def load_whisper_model():
    """р╣Вр╕лр╕ер╕Ф faster-whisper model р╕Чр╕╡р╣Ир╕Ыр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в"""
    st.info("ЁЯза р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╣Вр╕бр╣Ар╕Фр╕е Whisper р╕Чр╕╡р╣Ир╕Ыр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в...")
    
    # р╕ер╕│р╕Фр╕▒р╕Ъ priority: large-v3 -> large-v2 -> medium -> base
    models_to_try = [
        ("large-v3", "float16"),  # р╣Бр╕бр╣Ир╕Щр╕вр╕│р╕Чр╕╡р╣Ир╕кр╕╕р╕Ф
        ("large-v2", "float16"),  # р╕гр╕нр╕Зр╕ер╕Зр╕бр╕▓
        ("medium", "int8"),       # р╣Ар╕гр╣Зр╕зр╣Бр╕ер╕░р╣Бр╕бр╣Ир╕Щр╕вр╕│р╕Юр╕нр╕кр╕бр╕Др╕зр╕г
        ("base", "int8")         # fallback
    ]
    
    for model_name, compute_type in models_to_try:
        try:
            st.info(f"ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕нр╕Зр╣Вр╕бр╣Ар╕Фр╕е {model_name}...")
            model = WhisperModel(model_name, device="cpu", compute_type=compute_type)
            st.success(f"тЬЕ р╣Вр╕бр╣Ар╕Фр╕е Whisper {model_name} р╣Вр╕лр╕ер╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И!")
            return model
        except Exception as e:
            st.warning(f"тЪая╕П р╣Вр╕бр╣Ар╕Фр╕е {model_name} р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {e}")
            continue
    
    st.error("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Вр╕лр╕ер╕Фр╣Вр╕бр╣Ар╕Фр╕е Whisper р╣Др╕Фр╣Йр╣Ар╕ер╕в")
    return None

def transcribe_audio(audio_bytes, model):
    """р╕Цр╕нр╕Фр╣Ар╕кр╕╡р╕вр╕З audio bytes р╣Вр╕Фр╕вр╣Гр╕Кр╣Й faster-whisper р╣Бр╕Ър╕Ър╕Ыр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в"""
    if not model:
        return ""
    
    try:
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
            tmp_file.write(audio_bytes)
            tmp_file_path = tmp_file.name
        
        # р╕Ыр╕гр╕▒р╕Ъ parameters р╣Ар╕Юр╕╖р╣Ир╕нр╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│р╕кр╕╣р╕Зр╕кр╕╕р╕Ф
        segments, info = model.transcribe(
            tmp_file_path,
            language="th",              # р╕Ър╕▒р╕Зр╕Др╕▒р╕Ър╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в
            beam_size=10,               # р╣Ар╕Юр╕┤р╣Ир╕бр╕Ир╕▓р╕Б 5 р╣Ар╕Ыр╣Зр╕Щ 10 р╣Ар╕Юр╕╖р╣Ир╕нр╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│
            best_of=10,                 # р╣Ар╕Юр╕┤р╣Ир╕бр╕Ир╕▓р╕Б 5 р╣Ар╕Ыр╣Зр╕Щ 10
            temperature=0.0,            # р╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╣Гр╕Ир╕кр╕╣р╕Зр╕кр╕╕р╕Ф
            patience=2,                 # р╣Ар╕Юр╕┤р╣Ир╕б patience р╣Ар╕Юр╕╖р╣Ир╕нр╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╕Чр╕╡р╣Ир╕Фр╕╡р╕Вр╕╢р╣Йр╕Щ
            length_penalty=1.0,         # р╕Др╕зр╕Ър╕Др╕╕р╕бр╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Вр╕нр╕Зр╕Ыр╕гр╕░р╣Вр╕вр╕Д
            repetition_penalty=1.1,     # р╕ер╕Фр╕Бр╕▓р╕гр╕Юр╕╣р╕Фр╕Лр╣Йр╕│
            no_repeat_ngram_size=2,     # р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щр╕Др╕│р╕Лр╣Йр╕│р╣Гр╕Щр╕гр╕░р╕вр╕░р╕кр╕▒р╣Йр╕Щ
            suppress_blank=True,        # р╕ер╕Ър╕Кр╣Ир╕зр╕Зр╕зр╣Ир╕▓р╕З
            suppress_tokens=[-1],       # р╕ер╕Ъ tokens р╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г
            without_timestamps=False,   # р╣Ар╕Бр╣Зр╕Ъ timestamp р╣Др╕зр╣Йр╣Ар╕Юр╕╖р╣Ир╕н debug
            word_timestamps=True        # р╣Ар╕Юр╕┤р╣Ир╕б word-level timestamps
        )
        
        os.unlink(tmp_file_path)
        
        # р╕гр╕зр╕бр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Бр╕ер╕░р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф
        text = " ".join(segment.text.strip() for segment in segments if segment.text.strip()).strip()
        
        # р╕Ыр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б
        text = clean_thai_text(text)
        
        return text
        
    except Exception as e:
        st.error(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Цр╕нр╕Фр╣Ар╕кр╕╡р╕вр╕З: {e}")
        return ""

def clean_thai_text(text):
    """р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕вр╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕Ир╕▓р╕Б Whisper"""
    if not text:
        return ""
    
    # р╕ер╕Ър╕Кр╣Ир╕зр╕Зр╕зр╣Ир╕▓р╕Зр╕лр╕ер╕▓р╕вр╕Кр╣Ир╕зр╕Зр╣Бр╕ер╕░ normalize spaces
    text = re.sub(r'\s+', ' ', text).strip()
    
    # р╕ер╕Ър╕нр╕▒р╕Бр╕Вр╕гр╕░р╕Юр╕┤р╣Ар╕ир╕йр╣Бр╕ер╕░р╕кр╕▒р╕Нр╕ер╕▒р╕Бр╕йр╕Ур╣Мр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
    text = re.sub(r'[^\u0e00-\u0e7f\w\s]', '', text)
    
    # р╣Бр╕Бр╣Йр╣Др╕Вр╕Др╕│р╕Чр╕╡р╣И Whisper р╕бр╕▒р╕Бр╕Ир╕░р╕Цр╕нр╕Фр╕Ьр╕┤р╕Ф
    common_fixes = {
        'р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в': 'р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в',
        'р╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡': 'р╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡',
        'р╕Юр╕гр╕░р╕Ир╕нр╕бр╣Ар╕Бр╕ер╣Йр╕▓': 'р╕Юр╕гр╕░р╕Ир╕нр╕бр╣Ар╕Бр╕ер╣Йр╕▓',
        'р╕кр╕╕р╕зр╕гр╕гр╕Ур╕ар╕╣р╕бр╕┤': 'р╕кр╕╕р╕зр╕гр╕Ур╕ар╕╣р╕бр╕┤',
        'р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Юр╕бр╕лр╕▓р╕Щр╕Др╕г': 'р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Юр╕бр╕лр╕▓р╕Щр╕Др╕г',
        'р╕Кр╕▒р╕вр╕кр╕бр╕гр╕ар╕╣р╕бр╕┤': 'р╕Кр╕▒р╕вр╕кр╕бр╕гр╕ар╕╣р╕бр╕┤'
    }
    
    # р╣Бр╕Чр╕Щр╕Чр╕╡р╣Ир╕Др╕│р╕Чр╕╡р╣Ир╕Цр╕нр╕Фр╕Ьр╕┤р╕Ф
    for wrong, correct in common_fixes.items():
        text = text.replace(wrong, correct)
    
    return text.strip()

# ----> р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ Callback р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щр╕бр╕▓р╣Гр╕лр╕бр╣И <----
def handle_audio_upload():
    if 'audio_uploader' in st.session_state and st.session_state.audio_uploader is not None:
        model = load_whisper_model()
        if model:
            with st.spinner("ЁЯФН р╕Бр╕│р╕ер╕▒р╕Зр╕Цр╕нр╕Фр╣Ар╕кр╕╡р╕вр╕З..."):
                audio_bytes = st.session_state.audio_uploader.read()
                transcribed_text = transcribe_audio(audio_bytes, model)

            if transcribed_text:
                st.success(f"ЁЯУЭ р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Цр╕нр╕Фр╣Др╕Фр╣Й: '{transcribed_text}'")
                # р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Др╣Ир╕▓р╣Гр╕Щ session_state р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Й text_input р╕гр╕▒р╕Ър╣Др╕Ыр╣Гр╕Кр╣Йр╣Гр╕Щр╕гр╕нр╕Ър╕Цр╕▒р╕Фр╣Др╕Ы
                st.session_state.location_input = transcribed_text
                # р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕лр╕Щр╣Йр╕▓р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Й widget р╕гр╕▒р╕Ър╕Др╣Ир╕▓р╣Гр╕лр╕бр╣И
                st.rerun()
            else:
                st.warning("тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Цр╕нр╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╣Др╕Фр╣Й")

# --- 1. р╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕зр╕▓р╕бр╕гр╕╣р╣Й (Knowledge Base) р╣Бр╕ер╕░ Fuzzy Matching Logic ---
CORRECT_LOCATIONS = [
    # р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в
    "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡р╕Юр╕гр╕░р╕Ир╕нр╕бр╣Ар╕Бр╕ер╣Йр╕▓р╕Юр╕гр╕░р╕Щр╕Др╕гр╣Ар╕лр╕Щр╕╖р╕н",
    "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╣Ар╕Бр╕йр╕Хр╕гр╕ир╕▓р╕кр╕Хр╕гр╣М",
    "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Ю",
    "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕Кр╕╕р╕ер╕▓р╕ер╕Зр╕Бр╕гр╕Ур╣М",
    "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕бр╕лр╕┤р╕Фр╕е",
    "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕Шр╕гр╕гр╕бр╕ир╕▓р╕кр╕Хр╕гр╣М",
    "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕гр╕▓р╕бр╕Др╕│р╣Бр╕лр╕З",
    "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕ир╕гр╕╡р╕Щр╕Др╕гр╕┤р╕Щр╕Чр╕гр╕зр╕┤р╣Вр╕гр╕Т",
    "р╕бр╕нр╕Бр╕░", "р╣Ар╕Бр╕йр╕Хр╕г", "р╕Бр╕Чр╕б",  # р╕Кр╕╖р╣Ир╕нр╣Ар╕ер╣Ир╕Щ
    
    # р╕кр╕Щр╕▓р╕бр╕Ър╕┤р╕Щ
    "р╕Чр╣Ир╕▓р╕нр╕▓р╕Бр╕▓р╕ир╕вр╕▓р╕Щр╕кр╕╕р╕зр╕гр╕гр╕Ур╕ар╕╣р╕бр╕┤",
    "р╕Чр╣Ир╕▓р╕нр╕▓р╕Бр╕▓р╕ир╕вр╕▓р╕Щр╕Фр╕нр╕Щр╣Ар╕бр╕╖р╕нр╕З",
    "р╕кр╕Щр╕▓р╕бр╕Ър╕┤р╕Щр╕кр╕╕р╕зр╕гр╕гр╕Ур╕ар╕╣р╕бр╕┤",
    "р╕кр╕Щр╕▓р╕бр╕Ър╕┤р╕Щр╕Фр╕нр╕Щр╣Ар╕бр╕╖р╕нр╕З",
    
    # р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Н
    "р╕нр╕Щр╕╕р╕кр╕▓р╕зр╕гр╕╡р╕вр╣Мр╕Кр╕▒р╕вр╕кр╕бр╕гр╕ар╕╣р╕бр╕┤",
    "р╕нр╕Щр╕╕р╕кр╕▓р╕зр╕гр╕╡р╕вр╣Мр╕Ыр╕гр╕░р╕Кр╕▓р╕Шр╕┤р╕Ыр╣Др╕Хр╕в",
    "р╕зр╕▒р╕Фр╕Юр╕гр╕░р╣Бр╕Бр╣Йр╕з",
    "р╕зр╕▒р╕Фр╕Юр╕н",
    "р╕зр╕▒р╕Фр╕нр╕гр╕╕р╕У",
    "р╕зр╕▒р╕Фр╣Ар╕Ър╕Нр╕Ир╕бр╕Ър╕Юр╕┤р╕Хр╕г",
    "р╕зр╕▒р╕Фр╕Юр╕гр╕░р╕ир╕гр╕╡р╕гр╕▒р╕Хр╕Щр╕ир╕▓р╕кр╕Фр╕▓р╕гр╕▓р╕б",
    "р╕зр╕▒р╕Фр╣Др╕Хр╕гр╕бр╕┤р╕Хр╕г",
    "р╕Юр╕гр╕░р╕Ър╕гр╕бр╕бр╕лр╕▓р╕гр╕▓р╕Кр╕зр╕▒р╕З",
    
    # р╕кр╕Цр╕▓р╕Щр╕╡р╕Бр╕▓р╕гр╣Ар╕Фр╕┤р╕Щр╕Чр╕▓р╕З
    "р╕кр╕Цр╕▓р╕Щр╕╡р╕гр╕Цр╣Др╕Яр╕Яр╣Йр╕▓р╕лр╕▒р╕зр╕ер╕│р╣Вр╕Юр╕З",
    "р╕кр╕Цр╕▓р╕Щр╕╡ BTS р╕кр╕вр╕▓р╕б",
    "р╕кр╕Цр╕▓р╕Щр╕╡ MRT р╕кр╕╕р╕Вр╕╕р╕бр╕зр╕┤р╕Ч",
    "р╕кр╕Цр╕▓р╕Щр╕╡р╕гр╕Цр╣Др╕Яр╕Яр╣Йр╕▓р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Ю",
    "р╕кр╕Цр╕▓р╕Щр╕╡р╕гр╕Цр╣Др╕Яр╕Яр╣Йр╕▓р╕Ир╕Хр╕╕р╕Ир╕▒р╕Бр╕г",
    "р╕кр╕Цр╕▓р╕Щр╕╡р╕гр╕Цр╣Др╕Яр╕Яр╣Йр╕▓р╕Юр╕нр╕Юр╕гр╕░р╕гр╕▓р╕б р╕кр╕╡р╣И",
    "р╕кр╕Цр╕▓р╕Щр╕╡р╕гр╕Цр╣Др╕Яр╕Яр╣Йр╕▓р╕Юр╕гр╕░р╕Щр╣Ир╕нр╕Зр╣Ар╕Бр╕ер╣Йр╕▓",
    
    # р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕гр╕▓р╕Кр╕Бр╕▓р╕г
    "р╕Юр╕гр╕░р╕Ър╕гр╕бр╕бр╕лр╕▓р╕гр╕▓р╕Кр╕зр╕▒р╕З",
    "р╕Юр╕гр╕░р╕гр╕▓р╕Кр╕зр╕▒р╕Зр╕Ър╕гр╕гр╣Ар╕Ир╕Чр╕Юр╕гр╕░р╕Ър╕▓р╕Чр╕кр╕бр╣Ар╕Фр╣Зр╕Ир╕Юр╕гр╕░р╕Ыр╕Бр╣Ар╕Бр╕ер╣Йр╕▓р╕п",
    "р╕Чр╕│р╣Ар╕Щр╕╡р╕вр╕Ър╕гр╕▒р╕Рр╕кр╕ар╕▓",
    "р╕кр╕│р╕Щр╕▒р╕Бр╕Щр╕▓р╕вр╕Бр╕гр╕▒р╕Рр╕бр╕Щр╕Хр╕гр╕╡",
    "р╕Бр╕гр╕░р╕Чр╕гр╕зр╕Зр╕Бр╕▓р╕гр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и",
    "р╕Бр╕гр╕░р╕Чр╕гр╕зр╕Зр╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Юр╕бр╕лр╕▓р╕Щр╕Др╕г",
    
    # р╕ир╕╣р╕Щр╕вр╣Мр╕Бр╕▓р╕гр╕Др╣Йр╕▓
    "р╕Юр╕▓р╕гр╕▓р╕Бр╕нр╕Щ р╕кр╕вр╕▓р╕б р╕Юр╕▓р╕гр╕▓р╕Бр╕нр╕Щ",
    "р╣Ар╕Лр╣Зр╕Щр╕Чр╕гр╕▒р╕е р╣Ар╕зр╕┤р╕ер╕Фр╣М",
    "р╣Ар╕нр╣Зр╕бр╕Ър╕╡р╣Ар╕Д",
    "р╣Др╕нр╕Др╕нр╕Щ р╕кр╕вр╕▓р╕б",
    "р╣Ар╕Чр╕нр╕гр╣Мр╕бр╕┤р╕Щр╕нр╕е 21",
    "р╕бр╕▓р╕Ър╕╣р╕Нр╕Др╕гр╕нр╕З р╕кр╕вр╕▓р╕б",
    "р╣Бр╕Юр╕ер╕Хр╕┤р╕Щр╕▒р╕б р╣Бр╕Яр╕Кр╕▒р╣Ир╕Щ р╕бр╕нр╕ер╕ер╣М",
    
    # р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕е
    "р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕ер╕Ир╕╕р╕мр╕▓р╕ер╕Зр╕Бр╕гр╕Ур╣М",
    "р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕ер╕ир╕┤р╕гр╕┤р╕гр╕▓р╕К",
    "р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕ер╕гр╕▓р╕бр╕▓р╕Шр╕┤р╕Ър╕Фр╕╡",
    "р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕ер╣Ар╕зр╕Кр╕ир╕▓р╕кр╕Хр╕гр╣М",
    
    # р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╣Ир╕нр╕Зр╣Ар╕Чр╕╡р╣Ир╕вр╕з
    "р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Фр╕ар╕╣р╣Ар╕Бр╣Зр╕Х",
    "р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Фр╣Ар╕Кр╕╡р╕вр╕Зр╣Гр╕лр╕бр╣И",
    "р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Фр╕Вр╕нр╕Щр╣Бр╕Бр╣Ир╕Щ",
    "р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Фр╕кр╕Зр╕Вр╕ер╕▓",
    "р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Фр╕кр╕╕р╕гр╕▓р╕йр╕Ор╕гр╣Мр╕Шр╕▓р╕Щр╕╡",
    "р╕Юр╕▒р╕Чр╕вр╕▓", "р╣Ар╕Кр╕╡р╕вр╕Зр╣Гр╕лр╕бр╣И", "р╕ар╕╣р╣Ар╕Бр╣Зр╕Х"  # р╕Кр╕╖р╣Ир╕нр╕кр╕▒р╣Йр╕Щ
]
THRESHOLD = 70  # р╕ер╕Фр╕Ир╕▓р╕Б 80 р╣Ар╕Ыр╣Зр╕Щ 70 р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╕вр╕╖р╕Фр╕лр╕вр╕╕р╣Ир╕Щр╕Вр╕╢р╣Йр╕Щ

def _normalize_text(text):
    t = (text or "").strip().lower()
    t = " ".join(t.split())
    return t

def extract_location_from_text(text):
    """р╕Фр╕╢р╕Зр╕Кр╕╖р╣Ир╕нр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Ир╕▓р╕Бр╕Ыр╕гр╕░р╣Вр╕вр╕Др╕вр╕▓р╕зр╣Ж р╣Вр╕Фр╕вр╣Гр╕Кр╣Й NLP р╣Бр╕ер╕░ pattern matching"""
    if not text:
        return []
    
    text = _normalize_text(text)
    potential_locations = []
    
    # 1. р╕лр╕▓р╕Др╕│р╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕ер╕┤р╕кр╕Хр╣Мр╣Вр╕Фр╕вр╕Хр╕гр╕З
    for location in CORRECT_LOCATIONS:
        location_normalized = _normalize_text(location)
        if location_normalized in text:
            potential_locations.append(location)
    
    # 2. р╣Гр╕Кр╣Й Regex patterns р╕лр╕▓р╕Др╕│р╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣И
    location_patterns = [
        r'(р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в[\u0e00-\u0e7f\s]+)',  # р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в + р╕Кр╕╖р╣Ир╕н
        r'(р╕Чр╣Ир╕▓р╕нр╕▓р╕Бр╕▓р╕ир╕вр╕▓р╕Щ[\u0e00-\u0e7f\s]+)',      # р╕кр╕Щр╕▓р╕бр╕Ър╕┤р╕Щ
        r'(р╕кр╕Щр╕▓р╕бр╕Ър╕┤р╕Щ[\u0e00-\u0e7f\s]+)',            # р╕кр╕Щр╕▓р╕бр╕Ър╕┤р╕Щ
        r'(р╕нр╕Щр╕╕р╕кр╕▓р╕зр╕гр╕╡р╕вр╣М[\u0e00-\u0e7f\s]+)',        # р╕нр╕Щр╕╕р╕кр╕▓р╕зр╕гр╕╡р╕вр╣М
        r'(р╕зр╕▒р╕Ф[\u0e00-\u0e7f\s]+)',                   # р╕зр╕▒р╕Ф
        r'(р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕е[\u0e00-\u0e7f\s]+)',        # р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕е
        r'(р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Ф[\u0e00-\u0e7f\s]+)',            # р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Ф
        r'(р╕кр╕Цр╕▓р╕Щр╕╡[\u0e00-\u0e7f\s]+)',               # р╕кр╕Цр╕▓р╕Щр╕╡
        r'(BTS [\u0e00-\u0e7f\w\s]+)',                # BTS
        r'(MRT [\u0e00-\u0e7f\w\s]+)',                # MRT
    ]
    
    for pattern in location_patterns:
        matches = re.findall(pattern, text, re.UNICODE)
        for match in matches:
            cleaned = match.strip()
            if len(cleaned) > 3:  # р╕Бр╕гр╕нр╕Зр╕Др╕│р╕Чр╕╡р╣Ир╕кр╕▒р╣Йр╕Щр╣Ар╕Бр╕┤р╕Щр╣Др╕Ы
                potential_locations.append(cleaned)
    
    # 3. р╣Гр╕Кр╣Й pythainlp tokenize р╣Ар╕Юр╕╖р╣Ир╕нр╕лр╕▓р╕Др╕│р╕Щр╕▓р╕бр╣Ар╕Йр╕Юр╕▓р╕░ (р╕Цр╣Йр╕▓р╕бр╕╡)
    if PYTHAINLP_AVAILABLE:
        try:
            words = word_tokenize(text, engine='newmm')
            # р╕лр╕▓р╕Др╕│р╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕Др╕│р╕Щр╕▓р╕бр╣Вр╕Фр╕вр╕Фр╕╣р╕Ир╕▓р╕Бр╕Др╕│р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕Фр╕вр╕гр╕нр╕Ъ
            for i, word in enumerate(words):
                # р╕лр╕▓ compound words р╣Ар╕Кр╣Ир╕Щ "р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в" + р╕Др╕│р╕Цр╕▒р╕Фр╣Др╕Ы
                if word in ['р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в', 'р╕кр╕Щр╕▓р╕бр╕Ър╕┤р╕Щ', 'р╕зр╕▒р╕Ф', 'р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕е', 'р╕нр╕Щр╕╕р╕кр╕▓р╕зр╕гр╕╡р╕вр╣М'] and i + 1 < len(words):
                    compound = word + words[i + 1]
                    if len(compound) > 5:
                        potential_locations.append(compound)
        except:
            pass  # р╕Цр╣Йр╕▓ tokenizer р╕ер╣Йр╕бр╣Ар╕лр╕ер╕зр╕Бр╣Зр╕Вр╣Йр╕▓р╕бр╣Др╕Ы
    
    # р╕ер╕Ър╕Др╕│р╕Лр╣Йр╕│ р╣Бр╕ер╕░ return р╣Бр╕Др╣И unique values
    return list(set(potential_locations))

def get_best_match(input_name, correct_list, threshold=THRESHOLD):
    """р╕лр╕▓ fuzzy match р╕Чр╕╡р╣Ир╕Фр╕╡р╕Чр╕╡р╣Ир╕кр╕╕р╕Ф - р╕гр╕нр╕Зр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╕Ир╕▓р╕Бр╕Ыр╕гр╕░р╣Вр╕вр╕Др╕Фр╣Йр╕зр╕в"""
    # 1. р╕ер╕нр╕Зр╕Фр╕╢р╕Зр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Ир╕▓р╕Бр╕Ыр╕гр╕░р╣Вр╕вр╕Др╕Бр╣Ир╕нр╕Щ
    extracted_locations = extract_location_from_text(input_name)
    if extracted_locations:
        st.info(f"ЁЯФН р╕Юр╕Ър╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╣Гр╕Щр╕Ыр╕гр╕░р╣Вр╕вр╕Д: {', '.join(extracted_locations)}")
        # р╣Гр╕Кр╣Йр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╣Бр╕гр╕Бр╕Чр╕╡р╣Ир╕Юр╕Ъ
        input_name = extracted_locations[0]
    
    # 2. Fuzzy matching р╕Хр╕▓р╕бр╕Ыр╕Бр╕Хр╕┤
    query = _normalize_text(input_name)
    if not query:
        return None, 0

    result = rf_process.extractOne(
        query,
        correct_list,
        scorer=rf_fuzz.token_set_ratio
    )
    if not result:
        return None, 0

    best_name, best_score, _ = result
    return (best_name, int(best_score)) if best_score >= threshold else (None, int(best_score))

# --- 3. р╕кр╣Ир╕зр╕Щр╣Бр╕кр╕Фр╕Зр╕Ьр╕е Streamlit GUI ---
st.set_page_config(layout="wide")
st.title("ЁЯЧ║я╕П р╕гр╕░р╕Ър╕Ър╕Др╣Йр╕Щр╕лр╕▓р╕Юр╕┤р╕Бр╕▒р╕Фр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Фр╣Йр╕зр╕в AI (Fuzzy Geocoding)")
st.caption("р╕гр╕░р╕Ър╕Ър╕гр╕нр╕Зр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Ыр╣Йр╕нр╕Щр╕Др╕│р╕кр╕▒р╣Ир╕Зр╣Бр╕Ър╕Ъ Hybrid (р╕Юр╕┤р╕бр╕Юр╣М/р╣Ар╕кр╕╡р╕вр╕З) р╣Бр╕ер╕░р╣Бр╕Бр╣Йр╣Др╕Вр╕Др╕│р╕Ьр╕┤р╕Фр╣Вр╕Фр╕вр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤")
st.markdown("---")

# ----> р╣Бр╕Бр╣Йр╣Др╕Вр╕Ир╕╕р╕Фр╕Чр╕╡р╣И 1: р╣Ар╕Юр╕┤р╣Ир╕б 'location_input' р╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Гр╕Щ session_state <----
if 'latitude' not in st.session_state:
    st.session_state['latitude'] = None
    st.session_state['longitude'] = None
    st.session_state['address'] = None
    st.session_state['user_input'] = None
    st.session_state['location_input'] = ""

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ Geocoding р╕Чр╕╡р╣Ир╕Ир╕░р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕ер╕З session_state
def geocode_location(location_to_search, user_input):
    clean_query = (location_to_search or "").strip()
    if not clean_query:
        st.warning("р╣Вр╕Ыр╕гр╕Фр╕Ыр╣Йр╕нр╕Щр╕Кр╕╖р╣Ир╕нр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕зр╣Ир╕▓р╕З")
        return

    st.info(f"ЁЯЪА р╕Бр╕│р╕ер╕▒р╕Зр╕Др╣Йр╕Щр╕лр╕▓р╕Юр╕┤р╕Бр╕▒р╕Фр╕Вр╕нр╕З: **{clean_query}**")
    geolocator_arcgis = ArcGIS(user_agent="arcgis_fuzzy_app_v2")
    geolocator_nominatim = Nominatim(user_agent="nominatim_fuzzy_app_v2")
    location = None
    try:
        location = geolocator_arcgis.geocode(clean_query, timeout=10)
        if not location:
            location = geolocator_nominatim.geocode(clean_query, timeout=10)
    except Exception as e:
        st.error(f"ЁЯЪи р╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╣Ир╕н API: р╣Вр╕Ыр╕гр╕Фр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕нр╕┤р╕Щр╣Ар╕Чр╕нр╕гр╣Мр╣Ар╕Щр╣Зр╕Х ({e})")
        st.session_state['latitude'] = None
        return

    if location:
        st.success("тЬЕ р╕Др╣Йр╕Щр╕Юр╕Ър╕Юр╕┤р╕Бр╕▒р╕Фр╣Бр╕ер╣Йр╕з!")
        st.session_state['latitude'] = location.latitude
        st.session_state['longitude'] = location.longitude
        st.session_state['address'] = location.address
        st.session_state['user_input'] = user_input
    else:
        st.warning(f"ЁЯЪи р╣Др╕бр╣Ир╕Юр╕Ър╕Юр╕┤р╕Бр╕▒р╕Фр╕кр╕│р╕лр╕гр╕▒р╕Ъ '{clean_query}'")
        st.session_state['latitude'] = None

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Бр╕ер╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╣Бр╕ер╕░р╕Др╣Йр╕Щр╕лр╕▓
# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Бр╕ер╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╣Бр╕ер╕░р╕Др╣Йр╕Щр╕лр╕▓
def process_and_search(user_input):
    if not (user_input or "").strip():
        st.warning("р╣Вр╕Ыр╕гр╕Фр╕Ыр╣Йр╕нр╕Щр╕Кр╕╖р╣Ир╕нр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Бр╣Ир╕нр╕Щр╕Др╣Йр╕Щр╕лр╕▓")
        return
    
    # 1. р╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Чр╕╡р╣Ир╕кр╕╕р╕Фр╣Гр╕Щр╕ер╕┤р╕кр╕Хр╣Мр╕Вр╕нр╕Зр╣Ар╕гр╕▓р╕Бр╣Ир╕нр╕Щ
    matched_name, score = get_best_match(user_input, CORRECT_LOCATIONS)
    
    # 2. р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Др╕│р╕Чр╕╡р╣Ир╕Ир╕░р╣Гр╕Кр╣Йр╕Др╣Йр╕Щр╕лр╕▓р╕Ир╕гр╕┤р╕З (р╕Цр╣Йр╕▓р╣Ар╕Ир╕нр╣Гр╕Щр╕ер╕┤р╕кр╕Хр╣М р╕Бр╣Зр╣Гр╕Кр╣Йр╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╣Бр╕Бр╣Йр╣Бр╕ер╣Йр╕з)
    location_to_search = matched_name if matched_name else user_input
    
    # 3. р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╕Цр╣Йр╕▓р╕бр╕╡р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╕Др╕│
    if matched_name:
        st.success(f"ЁЯдЦ AI р╣Бр╕Бр╣Йр╣Др╕Вр╕Др╕│р╕Ьр╕┤р╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И: '{user_input}' р╕Цр╕╣р╕Бр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕Ыр╣Зр╕Щ '{matched_name}' (р╕Др╕░р╣Бр╕Щр╕Щ: {score}%)")
    
    # 4. р╕Др╣Йр╕Щр╕лр╕▓р╕Юр╕┤р╕Бр╕▒р╕Фр╣Ар╕кр╕бр╕н! (р╣Ар╕нр╕▓р╕нр╕нр╕Бр╕бр╕▓р╕Щр╕нр╕Б if/else р╣Бр╕ер╣Йр╕з)
    geocode_location(location_to_search, user_input)

col1, col2 = st.columns([1, 1])

# р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Лр╣Йр╕▓р╕в: р╕нр╕┤р╕Щр╕Юр╕╕р╕Хр╣Бр╕ер╕░р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Хр╕▒р╕зр╣Ар╕ер╕В
with col1:
    st.subheader("1. р╕Ыр╣Йр╕нр╕Щр╕Др╕│р╕кр╕▒р╣Ир╕З")
    
    # ----> р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З UI р╣Бр╕ер╕░р╣Ар╕Юр╕┤р╣Ир╕б examples <----
    st.markdown("ЁЯУЭ **р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ:**")
    examples_col1, examples_col2 = st.columns(2)
    
    with examples_col1:
        st.caption("ЁЯПп **р╕кр╕Цр╕▓р╕Щр╕ир╕╢р╕Бр╕йр╕▓:**")
        st.caption("тАв р╕бр╕нр╕Бр╕░ (р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡...)")
        st.caption("тАв р╕кр╕Цр╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕ер╕▓р╕ер╕Зр╕Бр╕г (р╕Ир╕░р╣Бр╕Бр╣Йр╣Ар╕Ыр╣Зр╕Щ 'р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕Кр╕╕р╕ер╕▓р╕ер╕Зр╕Бр╕гр╕Ур╣М')")
        st.caption("тАв р╣Ар╕Бр╕йр╕Хр╕г (р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╣Ар╕Бр╕йр╕Хр╕гр╕ир╕▓р╕кр╕Хр╕гр╣М)")
    
    with examples_col2:
        st.caption("тЬИя╕П **р╕кр╕Щр╕▓р╕зр╕Ър╕┤р╕Щ & р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣И:**")
        st.caption("тАв р╕кр╕╕р╕зр╕гр╕гр╕Ур╕ар╕╣р╕бр╕┤")
        st.caption("тАв р╕нр╕Щр╕╕р╕кр╕▓р╕зр╕гр╕╡р╕вр╣Мр╕Кр╕▒р╕вр╕кр╕бр╕гр╕ар╕╣р╕бр╕┤")
        st.caption("тАв р╕зр╕▒р╕Фр╕Юр╕гр╕░р╣Бр╕Бр╣Йр╕з")
    
    typed_input = st.text_input(
        "ЁЯУЭ р╕Юр╕┤р╕бр╕Юр╣Мр╕Кр╕╖р╣Ир╕нр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣И (р╣Ар╕Кр╣Ир╕Щ: р╕бр╕нр╕Бр╕░, р╕кр╕Цр╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕ер╕▓р╕ер╕Зр╕Бр╕г)",
        key="location_input",
        help="р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Юр╕┤р╕бр╕Юр╣Мр╕Кр╕╖р╣Ир╕нр╕вр╣Ир╕н р╕лр╕гр╕╖р╕нр╕Юр╕┤р╕бр╕Юр╣Мр╕Ыр╕гр╕░р╣Вр╕вр╕Др╕вр╕▓р╕зр╣Ж р╣Ар╕Кр╣Ир╕Щ 'р╕Йр╕▒р╕Щр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Др╕Ыр╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕вр╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Ю'"
    )

    if st.button("ЁЯФО р╕Др╣Йр╕Щр╕лр╕▓р╕Юр╕┤р╕Бр╕▒р╕Ф", use_container_width=True):
        process_and_search(typed_input) # р╣Гр╕Кр╣Й typed_input р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Ар╕Фр╕┤р╕бр╣Др╕Фр╣Йр╣Ар╕ер╕в
    
    st.markdown("**р╕лр╕гр╕╖р╕н** р╕Ър╕▒р╕Щр╕Чр╕╢р╕Б/р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З")
    
    # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Ар╕кр╕╡р╕вр╕Зр╣Бр╕Ър╕Ъ real-time (р╕Цр╣Йр╕▓р╕бр╕╡ library)
    if AUDIO_RECORDER_AVAILABLE:
        st.markdown("ЁЯОЩя╕П **р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Ар╕кр╕╡р╕вр╕Зр╣Бр╕Ър╕Ъ real-time**")
        audio_bytes = audio_recorder(
            text="р╕Бр╕Фр╣Ар╕Юр╕╖р╣Ир╕нр╕Ър╕▒р╕Щр╕Чр╕╢р╕Б",
            recording_color="#e74c3c",
            neutral_color="#34495e",
            icon_name="microphone",
            icon_size="2x",
            pause_threshold=2.0,
            sample_rate=16000
        )
        
        if audio_bytes:
            st.success("тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Ар╕кр╕╡р╕вр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И! р╕Бр╕│р╕ер╕▒р╕Зр╕Цр╕нр╕Фр╣Ар╕кр╕╡р╕вр╕З...")
            model = load_whisper_model()
            if model:
                with st.spinner("ЁЯФН р╕Бр╕│р╕ер╕▒р╕Зр╕Цр╕нр╕Фр╣Ар╕кр╕╡р╕вр╕З..."):
                    transcribed_text = transcribe_audio(audio_bytes, model)

                if transcribed_text:
                    st.success(f"ЁЯУЭ р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Чр╕╡р╣Ир╕Цр╕нр╕Фр╣Др╕Фр╣Й: **{transcribed_text}**")
                    st.session_state.location_input = transcribed_text
                    process_and_search(transcribed_text)
                    st.rerun()
                else:
                    st.warning("тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Цр╕нр╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ир╕▓р╕Бр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕╡р╣Ир╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕Фр╣Й")
    else:
        st.info("ЁЯУЭ **р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕:** р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Ар╕кр╕╡р╕вр╕Зр╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Ър╕Щ Cloud - р╣Гр╕Кр╣Йр╕Бр╕▓р╕гр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Бр╕Чр╕Щ")
    
    st.markdown("**р╕лр╕гр╕╖р╕н** р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕З")
    st.file_uploader(
        "ЁЯО╡ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕Юр╕╖р╣Ир╕нр╕Цр╕нр╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б",
        type=["wav", "mp3", "m4a", "flac", "ogg"],
        help="р╕гр╕нр╕Зр╕гр╕▒р╕Ър╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в (WAV, MP3, M4A, FLAC, OGG)",
        key="audio_uploader",
        on_change=handle_audio_upload # р╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й callback р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╣Др╕зр╣Й
    )
    # р╣Ар╕гр╕▓р╕ер╕Ъ block `if uploaded_audio:` р╣Ар╕Бр╣Ир╕▓р╕Чр╕┤р╣Йр╕Зр╣Др╕Ыр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф

    if st.session_state.latitude:
        st.subheader("тЬЕ р╕Ьр╕ер╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓")
        
        # р╣Бр╕кр╕Фр╕Зр╕Юр╕┤р╕Бр╕▒р╕Фр╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╕нр╣Ир╕▓р╕Щр╕Зр╣Ир╕▓р╕в
        col_lat, col_lng = st.columns(2)
        with col_lat:
            st.metric("ЁЯУН р╕ер╕░р╕Хр╕┤р╕Ир╕╣р╕Ф (Latitude)", f"{st.session_state.latitude:.6f}")
        with col_lng:
            st.metric("ЁЯУН р╕ер╕нр╕Зр╕Ир╕┤р╕Ир╕╣р╕Ф (Longitude)", f"{st.session_state.longitude:.6f}")
        
        # р╣Бр╕кр╕Фр╕Зр╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╣Бр╕Ър╕Ър╣Ар╕Хр╣Зр╕б
        st.info(f"ЁЯУН **р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╣Бр╕Ър╕Ър╣Ар╕Хр╣Зр╕б:** {st.session_state.address}")
        
        # р╣Ар╕Юр╕┤р╣Ир╕бр╕ер╕┤р╕Зр╕Бр╣М copy-paste р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕Фр╕гр╕Щ
        coordinates_text = f"{st.session_state.latitude}, {st.session_state.longitude}"
        st.code(f"Google Maps: https://maps.google.com/?q={coordinates_text}", language="text")
        st.code(f"Drone Coordinates: {coordinates_text}", language="text")

    st.subheader("2. р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Ар╕кр╕гр╕┤р╕бр╣Вр╕Др╕гр╕Зр╕Бр╕▓р╕гр╣Вр╕Фр╕гр╕Щ")
    uploaded_image = st.file_uploader("ЁЯУ╖ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ар╕▓р╕Юр╣Вр╕Фр╕гр╕Щр╣Ар╕Юр╕╖р╣Ир╕нр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕ар╕▓р╕гр╕Бр╕┤р╕И", type=["jpg", "jpeg", "png"])
    if uploaded_image:
        try:
            st.image(Image.open(uploaded_image), caption="р╕ар╕▓р╕Юр╕Чр╕╡р╣Ир╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Ф", use_column_width=True)
        except Exception as e:
            st.error(f"р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕кр╕Фр╕Зр╕ар╕▓р╕Юр╕Чр╕╡р╣Ир╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Фр╣Й: {e}")

# р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Вр╕зр╕▓: р╣Бр╕Ьр╕Щр╕Чр╕╡р╣И
with col2:
    st.subheader("р╣Бр╕Ьр╕Щр╕Чр╕╡р╣И")
    if st.session_state.latitude:
        m = folium.Map(location=[st.session_state.latitude, st.session_state.longitude], zoom_start=15)
        folium.Marker(
            location=[st.session_state.latitude, st.session_state.longitude],
            popup=f"ЁЯУН **{st.session_state.address}** (р╕бр╕▓р╕Ир╕▓р╕Б '{st.session_state.user_input}')",
            tooltip="р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕Зр╕Чр╕╡р╣Ир╕Др╣Йр╕Щр╕лр╕▓"
        ).add_to(m)
        if st_folium:
            st_folium(m, width=700, height=500)
        else:
            st.warning("р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕ер╕Ър╕гр╕▓р╕гр╕╡ streamlit-folium р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З")
    else:
        st.info("ЁЯЧ║я╕П р╣Бр╕Ьр╕Щр╕Чр╕╡р╣Ир╕Ир╕░р╕Ыр╕гр╕▓р╕Бр╕Пр╕Чр╕╡р╣Ир╕Щр╕╡р╣Ир╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕И")